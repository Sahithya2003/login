{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"findAtConfigPath\", {\n  enumerable: true,\n  get: () => findAtConfigPath\n});\nconst _fs = /*#__PURE__*/_interopRequireDefault(require(\"fs\"));\nconst _path = /*#__PURE__*/_interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction findAtConfigPath(root, result) {\n  let configPath = null;\n  let relativeTo = null;\n  root.walkAtRules(\"config\", rule => {\n    var ref;\n    var _file, ref1;\n    relativeTo = (ref1 = (_file = (ref = rule.source) === null || ref === void 0 ? void 0 : ref.input.file) !== null && _file !== void 0 ? _file : result.opts.from) !== null && ref1 !== void 0 ? ref1 : null;\n    if (relativeTo === null) {\n      throw rule.error(\"The `@config` directive cannot be used without setting `from` in your PostCSS config.\");\n    }\n    if (configPath) {\n      throw rule.error(\"Only one `@config` directive is allowed per file.\");\n    }\n    let matches = rule.params.match(/(['\"])(.*?)\\1/);\n    if (!matches) {\n      throw rule.error(\"A path is required when using the `@config` directive.\");\n    }\n    let inputPath = matches[2];\n    if (_path.default.isAbsolute(inputPath)) {\n      throw rule.error(\"The `@config` directive cannot be used with an absolute path.\");\n    }\n    configPath = _path.default.resolve(_path.default.dirname(relativeTo), inputPath);\n    if (!_fs.default.existsSync(configPath)) {\n      throw rule.error(`The config file at \"${inputPath}\" does not exist. Make sure the path is correct and the file exists.`);\n    }\n    rule.remove();\n  });\n  return configPath ? configPath : null;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","findAtConfigPath","_fs","_interopRequireDefault","require","_path","obj","__esModule","default","root","result","configPath","relativeTo","walkAtRules","rule","ref","_file","ref1","source","input","file","opts","from","error","matches","params","match","inputPath","isAbsolute","resolve","dirname","existsSync","remove"],"sources":["/home/sahithya/bios/login/fronte/node_modules/tailwindcss/lib/lib/findAtConfigPath.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"findAtConfigPath\", {\n    enumerable: true,\n    get: ()=>findAtConfigPath\n});\nconst _fs = /*#__PURE__*/ _interopRequireDefault(require(\"fs\"));\nconst _path = /*#__PURE__*/ _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction findAtConfigPath(root, result) {\n    let configPath = null;\n    let relativeTo = null;\n    root.walkAtRules(\"config\", (rule)=>{\n        var ref;\n        var _file, ref1;\n        relativeTo = (ref1 = (_file = (ref = rule.source) === null || ref === void 0 ? void 0 : ref.input.file) !== null && _file !== void 0 ? _file : result.opts.from) !== null && ref1 !== void 0 ? ref1 : null;\n        if (relativeTo === null) {\n            throw rule.error(\"The `@config` directive cannot be used without setting `from` in your PostCSS config.\");\n        }\n        if (configPath) {\n            throw rule.error(\"Only one `@config` directive is allowed per file.\");\n        }\n        let matches = rule.params.match(/(['\"])(.*?)\\1/);\n        if (!matches) {\n            throw rule.error(\"A path is required when using the `@config` directive.\");\n        }\n        let inputPath = matches[2];\n        if (_path.default.isAbsolute(inputPath)) {\n            throw rule.error(\"The `@config` directive cannot be used with an absolute path.\");\n        }\n        configPath = _path.default.resolve(_path.default.dirname(relativeTo), inputPath);\n        if (!_fs.default.existsSync(configPath)) {\n            throw rule.error(`The config file at \"${inputPath}\" does not exist. Make sure the path is correct and the file exists.`);\n        }\n        rule.remove();\n    });\n    return configPath ? configPath : null;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,kBAAkB,EAAE;EAC/CE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,MAAIC;AACb,CAAC,CAAC;AACF,MAAMC,GAAG,GAAG,aAAcC,sBAAsB,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/D,MAAMC,KAAK,GAAG,aAAcF,sBAAsB,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;AACnE,SAASD,sBAAsB,CAACG,GAAG,EAAE;EACjC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IACjCE,OAAO,EAAEF;EACb,CAAC;AACL;AACA,SAASL,gBAAgB,CAACQ,IAAI,EAAEC,MAAM,EAAE;EACpC,IAAIC,UAAU,GAAG,IAAI;EACrB,IAAIC,UAAU,GAAG,IAAI;EACrBH,IAAI,CAACI,WAAW,CAAC,QAAQ,EAAGC,IAAI,IAAG;IAC/B,IAAIC,GAAG;IACP,IAAIC,KAAK,EAAEC,IAAI;IACfL,UAAU,GAAG,CAACK,IAAI,GAAG,CAACD,KAAK,GAAG,CAACD,GAAG,GAAGD,IAAI,CAACI,MAAM,MAAM,IAAI,IAAIH,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACI,KAAK,CAACC,IAAI,MAAM,IAAI,IAAIJ,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAGN,MAAM,CAACW,IAAI,CAACC,IAAI,MAAM,IAAI,IAAIL,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,IAAI;IAC1M,IAAIL,UAAU,KAAK,IAAI,EAAE;MACrB,MAAME,IAAI,CAACS,KAAK,CAAC,uFAAuF,CAAC;IAC7G;IACA,IAAIZ,UAAU,EAAE;MACZ,MAAMG,IAAI,CAACS,KAAK,CAAC,mDAAmD,CAAC;IACzE;IACA,IAAIC,OAAO,GAAGV,IAAI,CAACW,MAAM,CAACC,KAAK,CAAC,eAAe,CAAC;IAChD,IAAI,CAACF,OAAO,EAAE;MACV,MAAMV,IAAI,CAACS,KAAK,CAAC,wDAAwD,CAAC;IAC9E;IACA,IAAII,SAAS,GAAGH,OAAO,CAAC,CAAC,CAAC;IAC1B,IAAInB,KAAK,CAACG,OAAO,CAACoB,UAAU,CAACD,SAAS,CAAC,EAAE;MACrC,MAAMb,IAAI,CAACS,KAAK,CAAC,+DAA+D,CAAC;IACrF;IACAZ,UAAU,GAAGN,KAAK,CAACG,OAAO,CAACqB,OAAO,CAACxB,KAAK,CAACG,OAAO,CAACsB,OAAO,CAAClB,UAAU,CAAC,EAAEe,SAAS,CAAC;IAChF,IAAI,CAACzB,GAAG,CAACM,OAAO,CAACuB,UAAU,CAACpB,UAAU,CAAC,EAAE;MACrC,MAAMG,IAAI,CAACS,KAAK,CAAE,uBAAsBI,SAAU,sEAAqE,CAAC;IAC5H;IACAb,IAAI,CAACkB,MAAM,EAAE;EACjB,CAAC,CAAC;EACF,OAAOrB,UAAU,GAAGA,UAAU,GAAG,IAAI;AACzC"},"metadata":{},"sourceType":"script","externalDependencies":[]}