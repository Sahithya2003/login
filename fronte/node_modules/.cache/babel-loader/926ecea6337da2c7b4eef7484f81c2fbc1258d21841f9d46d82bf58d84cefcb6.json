{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => _default\n});\nfunction _default(_context) {\n  return (root, result) => {\n    let found = false;\n    root.walkAtRules(\"tailwind\", node => {\n      if (found) return false;\n      if (node.parent && node.parent.type !== \"root\") {\n        found = true;\n        node.warn(result, [\"Nested @tailwind rules were detected, but are not supported.\", \"Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix\", \"Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy\"].join(\"\\n\"));\n        return false;\n      }\n    });\n    root.walkRules(rule => {\n      if (found) return false;\n      rule.walkRules(nestedRule => {\n        found = true;\n        nestedRule.warn(result, [\"Nested CSS was detected, but CSS nesting has not been configured correctly.\", \"Please enable a CSS nesting plugin *before* Tailwind in your configuration.\", \"See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting\"].join(\"\\n\"));\n        return false;\n      });\n    });\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","_default","_context","root","result","found","walkAtRules","node","parent","type","warn","join","walkRules","rule","nestedRule"],"sources":["/home/sahithya/bios/login/fronte/node_modules/tailwindcss/lib/lib/detectNesting.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>_default\n});\nfunction _default(_context) {\n    return (root, result)=>{\n        let found = false;\n        root.walkAtRules(\"tailwind\", (node)=>{\n            if (found) return false;\n            if (node.parent && node.parent.type !== \"root\") {\n                found = true;\n                node.warn(result, [\n                    \"Nested @tailwind rules were detected, but are not supported.\",\n                    \"Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix\",\n                    \"Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy\"\n                ].join(\"\\n\"));\n                return false;\n            }\n        });\n        root.walkRules((rule)=>{\n            if (found) return false;\n            rule.walkRules((nestedRule)=>{\n                found = true;\n                nestedRule.warn(result, [\n                    \"Nested CSS was detected, but CSS nesting has not been configured correctly.\",\n                    \"Please enable a CSS nesting plugin *before* Tailwind in your configuration.\",\n                    \"See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting\"\n                ].join(\"\\n\"));\n                return false;\n            });\n        });\n    };\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,SAAS,EAAE;EACtCE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,MAAIC;AACb,CAAC,CAAC;AACF,SAASA,QAAQ,CAACC,QAAQ,EAAE;EACxB,OAAO,CAACC,IAAI,EAAEC,MAAM,KAAG;IACnB,IAAIC,KAAK,GAAG,KAAK;IACjBF,IAAI,CAACG,WAAW,CAAC,UAAU,EAAGC,IAAI,IAAG;MACjC,IAAIF,KAAK,EAAE,OAAO,KAAK;MACvB,IAAIE,IAAI,CAACC,MAAM,IAAID,IAAI,CAACC,MAAM,CAACC,IAAI,KAAK,MAAM,EAAE;QAC5CJ,KAAK,GAAG,IAAI;QACZE,IAAI,CAACG,IAAI,CAACN,MAAM,EAAE,CACd,8DAA8D,EAC9D,wGAAwG,EACxG,kHAAkH,CACrH,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC;IACFR,IAAI,CAACS,SAAS,CAAEC,IAAI,IAAG;MACnB,IAAIR,KAAK,EAAE,OAAO,KAAK;MACvBQ,IAAI,CAACD,SAAS,CAAEE,UAAU,IAAG;QACzBT,KAAK,GAAG,IAAI;QACZS,UAAU,CAACJ,IAAI,CAACN,MAAM,EAAE,CACpB,6EAA6E,EAC7E,6EAA6E,EAC7E,6EAA6E,CAChF,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;QACb,OAAO,KAAK;MAChB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;AACL"},"metadata":{},"sourceType":"script","externalDependencies":[]}