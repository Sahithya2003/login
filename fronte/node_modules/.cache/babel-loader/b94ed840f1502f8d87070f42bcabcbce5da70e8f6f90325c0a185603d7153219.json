{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: () => cloneNodes\n});\nfunction cloneNodes(nodes) {\n  let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let raws = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  return nodes.map(node => {\n    var ref;\n    let cloned = node.clone();\n    // We always want override the source map\n    // except when explicitly told not to\n    let shouldOverwriteSource = ((ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.preserveSource) !== true || !cloned.source;\n    if (source !== undefined && shouldOverwriteSource) {\n      cloned.source = source;\n      if (\"walk\" in cloned) {\n        cloned.walk(child => {\n          child.source = source;\n        });\n      }\n    }\n    if (raws !== undefined) {\n      cloned.raws.tailwind = {\n        ...cloned.raws.tailwind,\n        ...raws\n      };\n    }\n    return cloned;\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","enumerable","get","cloneNodes","nodes","source","undefined","raws","map","node","ref","cloned","clone","shouldOverwriteSource","tailwind","preserveSource","walk","child"],"sources":["/home/sahithya/bios/login/fronte/node_modules/tailwindcss/lib/util/cloneNodes.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nObject.defineProperty(exports, \"default\", {\n    enumerable: true,\n    get: ()=>cloneNodes\n});\nfunction cloneNodes(nodes, source = undefined, raws = undefined) {\n    return nodes.map((node)=>{\n        var ref;\n        let cloned = node.clone();\n        // We always want override the source map\n        // except when explicitly told not to\n        let shouldOverwriteSource = ((ref = node.raws.tailwind) === null || ref === void 0 ? void 0 : ref.preserveSource) !== true || !cloned.source;\n        if (source !== undefined && shouldOverwriteSource) {\n            cloned.source = source;\n            if (\"walk\" in cloned) {\n                cloned.walk((child)=>{\n                    child.source = source;\n                });\n            }\n        }\n        if (raws !== undefined) {\n            cloned.raws.tailwind = {\n                ...cloned.raws.tailwind,\n                ...raws\n            };\n        }\n        return cloned;\n    });\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACFH,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,SAAS,EAAE;EACtCE,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,MAAIC;AACb,CAAC,CAAC;AACF,SAASA,UAAU,CAACC,KAAK,EAAwC;EAAA,IAAtCC,MAAM,uEAAGC,SAAS;EAAA,IAAEC,IAAI,uEAAGD,SAAS;EAC3D,OAAOF,KAAK,CAACI,GAAG,CAAEC,IAAI,IAAG;IACrB,IAAIC,GAAG;IACP,IAAIC,MAAM,GAAGF,IAAI,CAACG,KAAK,EAAE;IACzB;IACA;IACA,IAAIC,qBAAqB,GAAG,CAAC,CAACH,GAAG,GAAGD,IAAI,CAACF,IAAI,CAACO,QAAQ,MAAM,IAAI,IAAIJ,GAAG,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,GAAG,CAACK,cAAc,MAAM,IAAI,IAAI,CAACJ,MAAM,CAACN,MAAM;IAC5I,IAAIA,MAAM,KAAKC,SAAS,IAAIO,qBAAqB,EAAE;MAC/CF,MAAM,CAACN,MAAM,GAAGA,MAAM;MACtB,IAAI,MAAM,IAAIM,MAAM,EAAE;QAClBA,MAAM,CAACK,IAAI,CAAEC,KAAK,IAAG;UACjBA,KAAK,CAACZ,MAAM,GAAGA,MAAM;QACzB,CAAC,CAAC;MACN;IACJ;IACA,IAAIE,IAAI,KAAKD,SAAS,EAAE;MACpBK,MAAM,CAACJ,IAAI,CAACO,QAAQ,GAAG;QACnB,GAAGH,MAAM,CAACJ,IAAI,CAACO,QAAQ;QACvB,GAAGP;MACP,CAAC;IACL;IACA,OAAOI,MAAM;EACjB,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"script","externalDependencies":[]}