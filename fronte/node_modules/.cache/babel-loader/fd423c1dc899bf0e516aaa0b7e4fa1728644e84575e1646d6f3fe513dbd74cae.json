{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst _setupTrackingContext = /*#__PURE__*/_interopRequireDefault(require(\"./lib/setupTrackingContext\"));\nconst _processTailwindFeatures = /*#__PURE__*/_interopRequireDefault(require(\"./processTailwindFeatures\"));\nconst _sharedState = require(\"./lib/sharedState\");\nconst _findAtConfigPath = require(\"./lib/findAtConfigPath\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nmodule.exports = function tailwindcss(configOrPath) {\n  return {\n    postcssPlugin: \"tailwindcss\",\n    plugins: [_sharedState.env.DEBUG && function (root) {\n      console.log(\"\\n\");\n      console.time(\"JIT TOTAL\");\n      return root;\n    }, function (root, result) {\n      var ref;\n      // Use the path for the `@config` directive if it exists, otherwise use the\n      // path for the file being processed\n      configOrPath = (ref = (0, _findAtConfigPath.findAtConfigPath)(root, result)) !== null && ref !== void 0 ? ref : configOrPath;\n      let context = (0, _setupTrackingContext.default)(configOrPath);\n      if (root.type === \"document\") {\n        let roots = root.nodes.filter(node => node.type === \"root\");\n        for (const root1 of roots) {\n          if (root1.type === \"root\") {\n            (0, _processTailwindFeatures.default)(context)(root1, result);\n          }\n        }\n        return;\n      }\n      (0, _processTailwindFeatures.default)(context)(root, result);\n    }, _sharedState.env.DEBUG && function (root) {\n      console.timeEnd(\"JIT TOTAL\");\n      console.log(\"\\n\");\n      return root;\n    }].filter(Boolean)\n  };\n};\nmodule.exports.postcss = true;","map":{"version":3,"names":["Object","defineProperty","exports","value","_setupTrackingContext","_interopRequireDefault","require","_processTailwindFeatures","_sharedState","_findAtConfigPath","obj","__esModule","default","module","tailwindcss","configOrPath","postcssPlugin","plugins","env","DEBUG","root","console","log","time","result","ref","findAtConfigPath","context","type","roots","nodes","filter","node","root1","timeEnd","Boolean","postcss"],"sources":["/home/sahithya/bios/login/fronte/node_modules/tailwindcss/lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nconst _setupTrackingContext = /*#__PURE__*/ _interopRequireDefault(require(\"./lib/setupTrackingContext\"));\nconst _processTailwindFeatures = /*#__PURE__*/ _interopRequireDefault(require(\"./processTailwindFeatures\"));\nconst _sharedState = require(\"./lib/sharedState\");\nconst _findAtConfigPath = require(\"./lib/findAtConfigPath\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nmodule.exports = function tailwindcss(configOrPath) {\n    return {\n        postcssPlugin: \"tailwindcss\",\n        plugins: [\n            _sharedState.env.DEBUG && function(root) {\n                console.log(\"\\n\");\n                console.time(\"JIT TOTAL\");\n                return root;\n            },\n            function(root, result) {\n                var ref;\n                // Use the path for the `@config` directive if it exists, otherwise use the\n                // path for the file being processed\n                configOrPath = (ref = (0, _findAtConfigPath.findAtConfigPath)(root, result)) !== null && ref !== void 0 ? ref : configOrPath;\n                let context = (0, _setupTrackingContext.default)(configOrPath);\n                if (root.type === \"document\") {\n                    let roots = root.nodes.filter((node)=>node.type === \"root\");\n                    for (const root1 of roots){\n                        if (root1.type === \"root\") {\n                            (0, _processTailwindFeatures.default)(context)(root1, result);\n                        }\n                    }\n                    return;\n                }\n                (0, _processTailwindFeatures.default)(context)(root, result);\n            },\n            _sharedState.env.DEBUG && function(root) {\n                console.timeEnd(\"JIT TOTAL\");\n                console.log(\"\\n\");\n                return root;\n            }\n        ].filter(Boolean)\n    };\n};\nmodule.exports.postcss = true;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EACzCC,KAAK,EAAE;AACX,CAAC,CAAC;AACF,MAAMC,qBAAqB,GAAG,aAAcC,sBAAsB,CAACC,OAAO,CAAC,4BAA4B,CAAC,CAAC;AACzG,MAAMC,wBAAwB,GAAG,aAAcF,sBAAsB,CAACC,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAC3G,MAAME,YAAY,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AACjD,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAC3D,SAASD,sBAAsB,CAACK,GAAG,EAAE;EACjC,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IACjCE,OAAO,EAAEF;EACb,CAAC;AACL;AACAG,MAAM,CAACX,OAAO,GAAG,SAASY,WAAW,CAACC,YAAY,EAAE;EAChD,OAAO;IACHC,aAAa,EAAE,aAAa;IAC5BC,OAAO,EAAE,CACLT,YAAY,CAACU,GAAG,CAACC,KAAK,IAAI,UAASC,IAAI,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjBD,OAAO,CAACE,IAAI,CAAC,WAAW,CAAC;MACzB,OAAOH,IAAI;IACf,CAAC,EACD,UAASA,IAAI,EAAEI,MAAM,EAAE;MACnB,IAAIC,GAAG;MACP;MACA;MACAV,YAAY,GAAG,CAACU,GAAG,GAAG,CAAC,CAAC,EAAEhB,iBAAiB,CAACiB,gBAAgB,EAAEN,IAAI,EAAEI,MAAM,CAAC,MAAM,IAAI,IAAIC,GAAG,KAAK,KAAK,CAAC,GAAGA,GAAG,GAAGV,YAAY;MAC5H,IAAIY,OAAO,GAAG,CAAC,CAAC,EAAEvB,qBAAqB,CAACQ,OAAO,EAAEG,YAAY,CAAC;MAC9D,IAAIK,IAAI,CAACQ,IAAI,KAAK,UAAU,EAAE;QAC1B,IAAIC,KAAK,GAAGT,IAAI,CAACU,KAAK,CAACC,MAAM,CAAEC,IAAI,IAAGA,IAAI,CAACJ,IAAI,KAAK,MAAM,CAAC;QAC3D,KAAK,MAAMK,KAAK,IAAIJ,KAAK,EAAC;UACtB,IAAII,KAAK,CAACL,IAAI,KAAK,MAAM,EAAE;YACvB,CAAC,CAAC,EAAErB,wBAAwB,CAACK,OAAO,EAAEe,OAAO,CAAC,CAACM,KAAK,EAAET,MAAM,CAAC;UACjE;QACJ;QACA;MACJ;MACA,CAAC,CAAC,EAAEjB,wBAAwB,CAACK,OAAO,EAAEe,OAAO,CAAC,CAACP,IAAI,EAAEI,MAAM,CAAC;IAChE,CAAC,EACDhB,YAAY,CAACU,GAAG,CAACC,KAAK,IAAI,UAASC,IAAI,EAAE;MACrCC,OAAO,CAACa,OAAO,CAAC,WAAW,CAAC;MAC5Bb,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;MACjB,OAAOF,IAAI;IACf,CAAC,CACJ,CAACW,MAAM,CAACI,OAAO;EACpB,CAAC;AACL,CAAC;AACDtB,MAAM,CAACX,OAAO,CAACkC,OAAO,GAAG,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}